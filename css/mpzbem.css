// Material Functions / Presets
// 
// Functonal css units used to maintain consistancy across pens.
// 
// https://github.com/nikglavin/static-material-components/blob/master/style/style.scss


// Grid unit
//
// Used to help enforce consistency of vertical rhythm across components
//
// TODO: allow shorthand values while also maintaining offset eg: grid-unit(-1 -1 -10, 0 0 1) ?
//
// $multiplier: Number of grid units
// $offset: Number used to offset grid units when items fall outside the box-model height ie (border)
//
// Usage:
// padding: grid-unit(2); = 16px
// padding: grid-unit(2,-1); = 15px

$baseline: 8px;

@function grid-unit($multiplier, $offset: 0) {
  @return ($multiplier * $baseline) + $offset;
}


// Color pallet
//
// The color map should be a collection of maps. Each color map should be monochromatic, and have the following keys
// when appropriate.
//
// $palette: Sting name for color map
// $tone: String name following monochromatic color schema
//
// hue: [DEFAULT] Base color
// tint: Lightened variation (mixed with white)
// tone: Darker variation (mixed with a grey)
// shade: Darkest variation (mixed with black)
//
// Usage:
// background-color: color(primary);
// background-color: color(primary, tint);

$colors: (
  primary: (
    hue: #3f51b5,
    tint: #c5cae9,
    tone: #3f51b5,
    shade: #303f9f
  ),
  secondary: (
    hue: #2196F3,
    tint: #82B1FF,
    tone: #2979FF
  ),
  black: (
    hue: rgba(0, 0, 0, .87),
    tint: rgba(0, 0, 0, .12),
    tone: rgba(0, 0, 0, .24),
    shade: rgba(0, 0, 0, .54)
  ),
  white: (
    hue: rgba(255, 255, 255, .87),
    tint: rgba(255, 255, 255, .12),
    tone: rgba(255, 255, 255, .24),
    shade: rgba(255, 255, 255, .54)
  ),
  error: (
    hue: #dd040d
  ),
  success: (
    hue: #28945e
  )
);

@function color($palette, $tone: hue) {
  @return map-get(map-get($colors, $palette), $tone);
}


// Z Level
//
// Provides a site wide overview of z levels. Each component must be added to the $z-level map with its assigned index.
// The item must then be referenced by name (see usage below).
//
// $key: String name of component
//
// Usage:
// z-index: z-level(dialog);

$z-level: (
  dialog: 10,
  button: 2
);

@function z-level($key) {
  @return map-get($z-level, $key);
}

// Tracking
//
// TODO: move this to type as it probably doesn't need to be global... ?
// TODO: make this a mixin as it should only be used on a single attribute
//
// Usage:
// letter-spacing: tracking(5);

$tracking: (
  5: .0125em,
  10: .025em,
  20: .05em
);

@function tracking($key) {
  @return map-get($tracking, $key);
}


// Paper level
//
// The following box-shadow settings originate from getmdl.io, as my box-shadow skills appear to be low.
// Adds paper depth to any block element (higher values = bigger shadow).
//
// $level: Number height from page
//
// Usage:
// box-shadow: paper(2);

$shadow-key-umbra-opacity: .2;
$shadow-key-penumbra-opacity: .14;
$shadow-ambient-shadow-opacity: .12;

$paper: (
  1: (0px 2px 1px -1px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 1px 1px 0px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 1px 3px 0px rgba(0, 0, 0, $shadow-ambient-shadow-opacity)),
  2: (0px 3px 1px -2px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 2px 2px 0px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 1px 5px 0px rgba(0, 0, 0, $shadow-ambient-shadow-opacity)),
  3: (0px 3px 3px -2px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 3px 4px 0px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 1px 8px 0px rgba(0, 0, 0, $shadow-ambient-shadow-opacity)),
  4: (0px 2px 4px -1px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 4px 5px 0px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 1px 10px 0px rgba(0, 0, 0, $shadow-ambient-shadow-opacity)),
  5: (0px 3px 5px -1px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 5px 8px 0px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 1px 14px 0px rgba(0, 0, 0, $shadow-ambient-shadow-opacity)),
  6: (0px 3px 5px -1px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 6px 10px 0px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 1px 18px 0px rgba(0, 0, 0, $shadow-ambient-shadow-opacity)),
  7: (0px 4px 5px -2px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 7px 10px 1px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 2px 16px 1px rgba(0, 0, 0, $shadow-ambient-shadow-opacity)),
  8: (0px 5px 5px -3px rgba(0, 0, 0, $shadow-key-umbra-opacity), 0px 8px 10px 1px rgba(0, 0, 0, $shadow-key-penumbra-opacity), 0px 3px 14px 2px rgba(0, 0, 0, $shadow-ambient-shadow-opacity))
);

@function paper($level) {
  @return map-get($paper, $level);
}


// Transition / Animation timing and duration

$transition-timing: cubic-bezier(.4, 0, 1, 1);


// Shared pen defaults

*,
*:before,
*:after {
  box-sizing: inherit;
}

html {
  box-sizing: border-box;
  font-family: 'Roboto', sans-serif;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
}

body {
  margin: 0;
  font-size: 14px;
  line-height: 24px;
  letter-spacing: .01em;
  font-family: 'Roboto', sans-serif;
  color: #212121;
	background-color: mix(#fff, #E3F2FD, 90%);
}

a {
  text-decoration: none;
}

img {
  max-width: 100%;
}

ul {
  text-align: left;
  color: inherit;
}

.absolute-center {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  margin: auto;
  width: 240px;
  height: 50px;
}